21CS10083
YASH SIRVI
INFORMATION RETREIVAL CS60092 (2023)
ASSIGNMENT 1

# Environment Information

- python version: 3.11.4
- requirements:
    - nltk==3.8.1
    - spacy==3.6.1
    - regex
    - pickle
    - python -m spacy download en_core_web_trf


# Usage

- Assignment1_21CS10083_indexer.py
    python Assignment1_21CS10083_indexer.py <path to cran.all.1400 folder>
    - outputs:
        - model_queries_21CS10083.bin

- Assignment1_21CS10083_parser.py
    python Assignment1_21CS10083_search.py <path to cran.qry>
    - outputs:
        - model_queries_21CS10083.txt

- Assignment1_21CS10083_bool.py 
    python Assignment1_21CS10083_bool.py model_queries_21CS10083.bin model_queries_21CS10083.txt
    - outputs:
        - model_queries_21CS10083_output.txt


# Implementation Details

## Preprocessing of text

- Used regex for retreiving all .I and .W blocks from both cran.all.1400 and cran.qry files
- Again used regex for removing all numbers and punctuations, replacing them with a ' ' whitespace character
- Converted all text to lowercase. Although this was not part of the assignment, I found that doing this gave more results
- Broke down words into individual tokens
- Used word.is_stop to find if the token was a stop word or not. If yes then discarded that token.
    - Here, word is a token generated by spaCy library
    - Used the model en_core_web_trf for converting all text into spaCy tokens
- Lemmatized each token using word.lemma_
- Performed stemming using nltk.stem.PorterStemmer(). Although not a part of the assignment, stemming helped in improving results.

## Creating inverted index

- Creating a normal index first after retreiving all the text. Used a python dictionary with keys as document ID and text as .W content
- Preprocessed all the text after this
- Iterated over all words in a given key of the dictionary to finally create an inverted index
- Sorted the final postings list

## Creating queries

- Preprocessed text
- output the query along with text of the query

## Boolean Retrieval 

- Collected all postings lists of words inside a query 
- Used my merge routine to combine them 

## Merge routine 

- Keep record of counters of all postings lists
- Find max value of document ID from all counters
- If all counters are equal to max value, then add that document ID to the final result and increment all counters
- If not, then increment the counter of the postings lists until it is equal or greater than max value
- Keep track of previous counter values
- Repeat
- Stop condition: when current counter values are equal to the previous iteration counter values
- Return the final result

